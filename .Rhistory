DT=read.csv("getdata-data-ss06pid.csv", colClasses = "character")
head(DT)
t1<-sys.time
t1<-sys.time()
t1<-system.time()
t1
t1<-system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
t1<-system.time(rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2])
install.packages("data.table")
DT=read.csv("getdata-data-ss06pid.csv", colClasses = "character")
t1<-system.time(rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2])
t2<-system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t2<-system.time(tapply(as.numeric(DT$pwgtp15),DT$SEX,mean))
t2
t3<-system.time(DT[,mean(as.numeric(pwgtp15),by=SEX])
t3<-system.time(DT[,mean(pwgtp15,by=SEX])
t3<-system.time(DT[,mean(pwgtp15,by=SEX]))
DT$pwgtp15<-as.numeric(DT$pwgtp15)
t1<-system.time(rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2])
t2<-system.time(tapply(as.numeric(DT$pwgtp15),DT$SEX,mean))
t3<-system.time(DT[,mean(pwgtp15,by=SEX]))
t3<-system.time(DT[,mean(pwgtp15),by=SEX])
t4<-system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t4
t5<-system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
t5<-system.time(mean(DT[DT$SEX==1,]$pwgtp15) mean(DT[DT$SEX==2,]$pwgtp15))
t5<-system.time(mean(DT[DT$SEX==1,]$pwgtp15)
mean(DT[DT$SEX==2,]$pwgtp15))
t6<-system.time(mean(DT$pwgtp15,by=DT$SEX))
t6
t1
t2
t3
t4
t5
t6
t4==t2
t4==t6
t1<-system.time({rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2]})
t3<-system.time(DT[,mean(pwgtp15),by=SEX])
t5<-system.time({mean(DT[DT$SEX==1,]$pwgtp15)
mean(DT[DT$SEX==2,]$pwgtp15)})
t5
t6<-system.time(mean(DT$pwgtp15,by=DT$SEX))
t6
t2<-system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t2
?mean
?fread
g11<-rowMeans(DT)[DT$SEX==1]
g11<-tapply(DT$pwgtp15,DT$SEX,mean)
g11
g31<-DT[,mean(pwgtp15),by=SEX]
g41<-sapply(split(DT$pwgtp15,DT$SEX),mean)
g41
g51<-mean(DT[DT$SEX==1,]$pwgtp15)
g51
t2<-system.time(for (i in 1:100){ tapply(DT$pwgtp15,DT$SEX,mean)})
t2
t4<-system.time(for (i in 1:100){sapply(split(DT$pwgtp15,DT$SEX),mean)})
t4
t6<-system.time(for (i in 1:100){mean(DT$pwgtp15,by=DT$SEX)})
t6
df1 <- read.csv("Fss06hid.csv", colClasses = "character")
g<-df1$VAL
g1<-subset(df1,VAL=="24")
nrow(g1)
doc<-xmlTreeParse("rest.xml",useInternal=TRUE)
rootNode<-xmlRoot(doc)
library(XML)
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
doc<-xmlTreeParse("rest.xml",useInternal=TRUE)
rootNode<-xmlRoot(doc)
zp<-xpathSApply(rootNode,"//zipcode",xmlValue)
zp1<-zp=="21231"
sum(zp1)
t1<-system.time(for (i in 1:1000){ tapply(DT$pwgtp15,DT$SEX,mean)})
t1
t2<-system.time(for (i in 1:1000){
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2]})
t3<-system.time(for (i in 1:1000){sapply(split(DT$pwgtp15,DT$SEX),mean)})
t3
t4<-system.time(for (i in 1:1000){DT[,mean(pwgtp15),by=SEX]})
t5<-system.time(for (i in 1:1000){mean(DT[DT$SEX==1,]$pwgtp15)
mean(DT[DT$SEX==2,]$pwgtp15)})
t6<-system.time(for (i in 1:100){mean(DT$pwgtp15,by=DT$SEX)})
t6
t6<-system.time(for (i in 1:1000){mean(DT$pwgtp15,by=DT$SEX)})
t6
t1<-system.time(for (i in 1:1000){ tapply(DT$pwgtp15,DT$SEX,mean)})
t1
t3<-system.time(for (i in 1:1000){sapply(split(DT$pwgtp15,DT$SEX),mean)})
t3
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_25')
library(rJava)
library(xlsx)
colIndex<-7:15
rowIndex<-18:23
df3<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
sum(df3$Zip*df3$Ext,na.rm=T)
head(DT)
window()
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
x<-rand(100)
x<-mrand(100)
x<-c(1,2,3,4)
y<-c(4,2,5,1)
plot(x,y)
?lines
lines(x,y)
install("httr")
install.packages("httr")
library(httr)
oauth_endpoints("github")
GITHUB_CONSUMER_SECRET
myapp <- oauth_app("dc056c78ddbac434f9ab", "ed6bac313beb6add6c56d1af4b523d792616284c")
?oauth_app
myapp <- oauth_app("DS_test","dc056c78ddbac434f9ab", "ed6bac313beb6add6c56d1af4b523d792616284c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("DS_test"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github","dc056c78ddbac434f9ab", "ed6bac313beb6add6c56d1af4b523d792616284c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github","dc056c78ddbac434f9ab")
myapp <- oauth_app("github","dc056c78ddbac434f9ab", "ed6bac313beb6add6c56d1af4b523d792616284c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("DS_test")
oauth_endpoints("github")
myapp <- oauth_app("github","dc056c78ddbac434f9ab", "ed6bac313beb6add6c56d1af4b523d792616284c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
json1<-content(req)
json1
names(json1$owner)
names(json1)
json1
json2<fromJSON("https://api.github.com/users/jtleek/repos")
json2<-fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
json2<-fromJSON("https://api.github.com/users/jtleek/repos")
names(json2)
names(json2$html_url)
json2$html_url
json2$created_at
json2$git_url
json1
json1$created_at
chf<-function()
for (i in 1:30){
print(json1[i]$created_at)
}
chf()
req
content(req)
json1
names(json1)
names(json2)
names(json2$owner$repos_url)
names(json2$owner)
json2$owner$repos_url
json2$created_at
?write.csv
write.csv(json2$created_at,"vb.csv")
json2$owner
names(json2$owner)
names(json2)
names(json2$html_url)
json2$html_url
install.packages("sqldf")
asc<-read.csv("getdata-data-ss06pid.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
head(acs)
sqldf("select pwgtp1 from asc where AGEP < 50")
sqldf("select unique AGEP from asc")
sqldf("select distinct AGEP from asc")
con<-url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode<-readLines(con)
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
1.645*75+1100
?sapply
?rnorm
rnorm(100,mean=1100,sd=75)
mean(rnorm(100,mean=1100,sd=75))
?sapply
v<-sapply(rnorm(100,mean=1100,sd=75),mean)
v
?sd
sd(v)
mean(v)
mean(v)
mean(v)+sd(v)*1.645
?rnorm
s1<-rnorm(100,mean=1100,sd=75)
s1
s2<-mean(s1)
s2
s3<-sd(s1)
s3
s4<-s2+1.645*s3
s4
qnorm(0.95,mean=1100, sd=75)
s3<-sd(s1)/100
s4<-s2+1.645*s3
s4
s1<-rnorm(100,mean=1100,sd=75)
s2<-mean(s1)
s3<-sd(s1)/100
s4<-s2+1.645*s3
s4
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
s1<-rnorm(100,mean=1100,sd=75)
mean(s1)+1.645*sd(s1)/100
choose(5,4)*.5^5+choose(5,5)*.5^5
qnorm(0.75,15,10)
qnorm(0.51,15,10)
qnorm(0.52,15,10)
qnorm(0.6,15,10)
qnorm(0.55,15,10)
qnorm(0.54,15,10)
qnorm(0.46,15,10)
v1<-rnorm(100,15,10)
v1
v2<-sort(v1)
v2
mean(v1)
mean(rnorm(1000,0.5,1/12))
mean(rnorm(1000,0.5,1/12))
mean(rnorm(1000,0.5,1/12))
mean(rnorm(1000,0.5,1/12))
ppois(10,lambda=5*3)
ppois(10,lambda=5*3)
ppois(10,lambda=5*3)
s1<-rnorm(100,mean=1100,sd=75)
s1
75*75/100
?sqr
?sqrt
sqrt(56.25)
1100+1.645*7.5
?xyplot
install.packages(lattice)
install.packages("lattice")
library(lattice)
?xyplot
install.packages("ggplot2")
library(ggplot2)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?par
?trellis.par.set
?print.trellis
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
?geom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
?lines
?text
?points
?llines
getwd()
setwd("C:/Users/Anton/RepData_PeerAssessment1/activity")
activityData<-read.csv("activity.csv")
head(activityData)
?lm
dates<-unique(activityData$date)
dates
d2<tapply(activityData$steps,dates,mean)
d2<-tapply(activityData$steps,dates,mean)
d2<-tapply(activityData$steps,activityData$dates,mean)
?gl
split(activityData, dates)
split(activityData, activityData$dates)
split(activityData$steps, activityData$dates)
split(activityData, as.Date(activityData$dates))
setwd("C:/Users/Anton/RepData_PeerAssessment1/activity")
activityData<-read.csv("activity.csv")
split(activityData, as.Date(activityData$dates))
head(activityData)
split(activityData, as.Date(activityData$dates,,"%Y-%m-%d"))
split(activityData, as.Date(activityData$dates,"%Y-%m-%d"))
split(activityData, as.Date(activityData$date,"%Y-%m-%d"))
mean1<-lapply(split(activityData, as.Date(activityData$date,"%Y-%m-%d")),mean)
warnings()
mean1
activityData_mod1<-activityData[complete.cases(activityData),]
head(activityData_mod1)
dates<-unique(as.Date(activityData$date,"%Y-%m-%d"))
dates
mean1<-lapply(split(activityData_mod1, as.Date(activityData_mod1$date,"%Y-%m-%d")),mean)
mean1
head(activityData_mod1)
activityData_mod1$date<-as.Date(activityData_mod1$date,"%Y-%m-%d")
aggregate(activityData_mod1[, 1], list(activityData_mod1$date), mean)
?aggregate
activityDays<-aggregate(activityData_mod1[, 1], list(activityData_mod1$date), mean)
activityDays
names(activityDays)
activityDays<-aggregate(activityData_mod1[, 1], list(activityData_mod1$date), sum)
names(activityDays)<-c("Date","Steps per day")
activityDays
names(activityDays)<-c("Date","Steps")
hist(activityDays$Steps, col = "red",xlab="",main="")
?hist
hist(activityDays$Steps, col = "red",xlab="",main="",breaks=50)
hist(activityDays$Steps, col = "red",xlab="",main="",breaks=20)
hist(activityDays$Steps, col = "red",xlab="",main="",breaks=17)
hist(activityDays$Steps, col = "red",xlab="",main="",breaks=15)
mean1<-mean(activityDays$Steps)
mean1
median1<-median(activityDays$Steps)
median1
setwd("C:/Users/Anton/RepData_PeerAssessment1)
setwd("C:/Users/Anton/RepData_PeerAssessment1")
getwd()
setwd("C:/Users/Anton/RepData_PeerAssessment1")
getwd()
activityData<-read.csv("activity.csv")
activityIntervals<-aggregate(activityData[, 1], list(activityData$interval), mean)
head(activityIntervals)
activityIntervals
activityData<-activityData[complete.cases(activityData),]
activityIntervals<-aggregate(activityData[, 1], list(activityData$interval), mean)
activityIntervals
plot(activityIntervals$x,type="l")
plot(activityIntervals$x,type="l",xlab="",ylab="")
axis(side=1,at=c(0:24),labels=c(1:24))
axis(side=1,at=c(0:24),labels=c(0:24))
plot(activityIntervals$x,type="l",xlab="5-min intervals",ylab="average steps per interval")
activityIntervals[1,max(activityIntervals$x)]
max(activityIntervals$x)
activityIntervals[,activityIntervals$x==max(activityIntervals$x)]
activityIntervals[activityIntervals$x==max(activityIntervals$x),]
activityIntervals[activityIntervals$x==max(activityIntervals$x),]$Group.1
activityIntervals
input<-read.csv("activity.csv")
nrow(input)
activityIntervals[activityIntervals$Group.1==835]
activityIntervals[activityIntervals$Group.1==835,1]
activityIntervals[activityIntervals$Group.1==835,2]
head(newData)
head(input)
weekdays(input$date[2])
?weekdays
input$date[2]
head(input)
input<-read.csv("activity.csv")
newData<-input
fg<-function(){
for (i in 1:nrow(newData)){
if(is.na(newData$steps[i])==TRUE){
newData$steps[i]<-activityIntervals[activityIntervals$Group.1==newData$interval[i],2]
}
}
newData
}
newData<-fg()
head(newData)
newData[1,1]
newData[1,2]
newData$date=as.Data(newData$date,"%Y-%m-%d")
newData$date=as.Date(newData$date,"%Y-%m-%d")
newData[1,2]
weekdays(input$date[2])
weekdays(input$date[2],FALSE)
input$date[2]
weekdays(newData$date[2],FALSE)
weekdays(newData$date[2],TRUE)
newData$WD <- ifelse(weekdays(newData$date,TRUE)=="Сб"||weekdays(newData$date,TRUE)=="Вс","weekand", "weekday")
newData$WD <- ifelse(weekdays(newData$date,TRUE)=="Сб"||weekdays(newData$date,TRUE)=="Вс","weekend", "weekday")
newData$WD <- ifelse(weekdays(newData$date,TRUE)=="Сб"||weekdays(newData$date,TRUE)=="Вс","weekend", "weekday")
newData$WD[4]
newData$WD[40]
newData$WD[400]
newData$WD[500]
weekdays(newData$date,TRUE)
newData$WD
newData$WD <- ifelse(weekdays(newData$date,TRUE)=="Сб"||weekdays(newData$date,TRUE)=="Вс", "weekend", "weekday")
newData$WD
newData$WD[1]
newData$WD[1800]
newData$WD[1900]
newData$WD[2000]
newData$WD[2100]
newData$WD[2200]
newData$WD[2300]
newData$WD[2400]
newData$WD[1700]
newData$WD[1500]
newData2<-subset(newData,newData$WD=="weekend")
newData2
newData$WD <- ifelse(weekdays(newData$date,TRUE)=="Sat"||weekdays(newData$date,TRUE)=="Sun", "weekend", "weekday")
newData2
newData1<-subset(newData,newData$WD=="weekday")
activityIntervals1<-aggregate(newData1[, 1], list(newData1$interval), mean)
newData2<-subset(newData,newData$WD=="weekend")
activityIntervals2<-aggregate(newData2[, 1], list(newData2$interval), mean)
Sys.setlocale("LC_TIME","English United States")
weekdays(newData$date[2],TRUE)
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(Day)$wday + 1]
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date[2])$wday + 1]
newData$WD <- ifelse(c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Saturday"||
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Sunday", "weekend", "weekday")
newData1<-subset(newData,newData$WD=="weekday")
activityIntervals1<-aggregate(newData1[, 1], list(newData1$interval), mean)
newData2<-subset(newData,newData$WD=="weekend")
activityIntervals2<-aggregate(newData2[, 1], list(newData2$interval), mean)
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]
newData$WD <- ifelse(c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Saturday"|
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Sunday", "weekend", "weekday")
newData1<-subset(newData,newData$WD=="weekday")
activityIntervals1<-aggregate(newData1[, 1], list(newData1$interval), mean)
newData2<-subset(newData,newData$WD=="weekend")
activityIntervals2<-aggregate(newData2[, 1], list(newData2$interval), mean)
newData$WD <- ifelse(c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Saturday"|
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Sunday", "weekend", "weekday")
newData1<-subset(newData,newData$WD=="weekday")
activityIntervals1<-aggregate(newData1[, 1], list(newData1$interval), mean)
newData2<-subset(newData,newData$WD=="weekend")
activityIntervals2<-aggregate(newData2[, 1], list(newData2$interval), mean)
plot(activityIntervals1$x, type="n",xlab="",main="",
ylab="average steps per interval,xaxt='n')
plot(activityIntervals1$x,type="l",col="red")
plot(activityIntervals2$x,type="l",col="blue")
legend("topright",legend=c("Weekdays","Weekends"),
lty=1,col=c("red","blue"),y.intersp=0.3,bty="n")
newData$WD <- ifelse(c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Saturday"|
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(newData$date)$wday + 1]=="Sunday", "weekend", "weekday")
newData1<-subset(newData,newData$WD=="weekday")
activityIntervals1<-aggregate(newData1[, 1], list(newData1$interval), mean)
newData2<-subset(newData,newData$WD=="weekend")
activityIntervals2<-aggregate(newData2[, 1], list(newData2$interval), mean)
plot(activityIntervals1$x, type="n",xlab="",main="",
ylab="average steps per interval,xaxt='n')
plot(activityIntervals1$x,type="l",col="red")
plot(activityIntervals2$x,type="l",col="blue")
legend("topright",legend=c("Weekdays","Weekends"),
lty=1,col=c("red","blue"),bty="n")
newData1
newData2
?as.Date
